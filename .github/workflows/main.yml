name: bygg og deploy

on:
  push:
    branches:
      - main

jobs:
  set_version:
    name: set image name
    runs-on: ubuntu-latest
    steps:
      - name: create docker tag
        run: echo "TAG=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
    outputs:
      image: ghcr.io/${{ github.repository }}/spare:${{ env.TAG }}

  build:
    name: build docker image
    runs-on: ubuntu-latest
    needs: set_version
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17.x'
          cache: 'gradle'
      - name: test and build
        run: ./gradlew test build
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ needs.set_version.outputs.image }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GITHUB_TOKEN }}
  snyk:
    name: check vulnerabilities
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Gradle vulnerability check
        uses: snyk/actions/gradle@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --project-name=spare --org=tbd-ty7 --fail-on=all --configuration-matching='^runtimeClasspath'
          command: monitor

  deployDev:
    name: deploy to dev
    needs: [set_version, build, snyk]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: deploy/dev.yml
          IMAGE: ${{ needs.set_version.outputs.image }}

  deployProd:
    name: deploy to prod
    needs: [set_version, deployDev]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          RESOURCE: deploy/prod.yml
          IMAGE: ${{ needs.set_version.outputs.image }}
